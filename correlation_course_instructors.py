courses = ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"]
mentors = [
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]
durations = [14, 20, 12, 20]

courses_list = []
for course, mentor, duration in zip(courses, mentors, durations):
	course_dict = {"title":course, "mentors":mentor, "duration":duration}	
	courses_list.append(course_dict)

# С этого момента начинается выполнение задания 3.
# На входе у вас есть только список курсов courses_list. Об исходных данных, на базе которых он был сделан, вы ничего не знаете

# Подсказка: если связь между продолжительностью курсов и количеством преподавателей есть,
# то после сортировки курсов по длительности и по количеству преподавателей курсы должны идти в одном и том же порядке
# Проверьте себя: в этом задании курсы будут идти в таком порядке:
# ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python", "Frontend-разработчик с нуля"] - по продолжительности,
# ["Python-разработчик с нуля", "Frontend-разработчик с нуля", "Fullstack-разработчик на Python", "Java-разработчик с нуля"] - по количеству преподавателей
# То есть ваш скрипт должен вывести "Связи нет", т.к. порядок оказался разным

# Подсказка 1: для сравнения используйте не названия курсов, а их порядковые номера в списке courses_list
# Подсказка 2: для сравнения сделайте пары [duration, index] и [mentors_count, index]
# Допишите код ниже, который добавляет эти пары в список duration_index и mcount_index соответственно:
# print(courses_list)
duration_index = []
mcount_index = []
for index, course in enumerate(courses_list):
	duration_index.append([course['duration'], index])
	mcount_index.append([len(course['mentors']), index]) # Напишите код по аналогии с duration_index
# print(duration_index)
# print(mcount_index)
# Отсортируйте список duration_index и список mcount_index
# Подсказка: функция sort() будет сортировать по первому элементу (то есть по duration и по количеству преподавателей),
# поэтому вы сразу получите правильный результат
# Самостоятельно напишите код сортировки ниже:
duration_index.sort()
mcount_index.sort()
# print(duration_index)
# print(mcount_index)
# Теперь вам необходимо отделить отсортированные индексы. Перенесите их в отдельные списки:
# indexes_d (индексы для сортировки курсов по длительности) и
# indexes_m (индексы для сортировки курсов по количеству преподавателей)
indexes_d = []
indexes_m = []
# # Допишите код ниже:
for _, indx in duration_index:
	indexes_d.append(indx)
# # Для indexes_m напишите аналогичный код самостоятельно:
for _, indx in mcount_index:
	indexes_m.append(indx)
# print(indexes_d)
# print(indexes_m)
# Сравните два получившихся списка индексов. Если они равны, то есть индексы идут в одинаковом порядке,
# выведите "Связь есть", если не равны - выведите "Связи нет" и ниже - номера курсов по длительности, а потом - по количеству преподавателей
# Допишите код ниже:
print("Связь есть" if indexes_d == indexes_m else "Связи нет")
print(f"Порядок курсов по длительности: {indexes_d}")
print(f"Порядок курсов по количеству преподавателей: {indexes_m}")

        # Решение  эксперта 

# Считаем, что у нас есть только courses_list. Об изначальных списках мы ничего не знаем
# Делаем два параллельных списка списков: 1) [duration, id] и 2) [mentors_count, id]. Применяем к каждому sort()
# sort() отсортирует по первому элементу каждого внутреннего списка, поэтому в результате id перемешаются - что нам и нужно
# В конце останется лишь сравнить порядок следования id в обоих списках

duration_index = []
mcount_index = []
# Готовим пары списков с элементами [duration, id] и [mentors_count, id]
for index, course in enumerate(courses_list):
	duration_index.append([course["duration"], index])
	mcount_index.append([len(course["mentors"]), index])

# Вариант 1: короткое решение
# Делаем новый список indexes, в котором первый кортеж - это отсортированные duration + отсортированные mentors count
# Второй кортеж - это отсортированные id от duration и отсортированные id от mentors count
# indexes = list(zip(*sorted(duration_index), *sorted(mcount_index)))[1]
# # Остаётся лишь разбить второй кортеж напополам: id от duration и отсортированные id от mentors count
# ids1 = indexes[:len(indexes)//2]
# ids2 = indexes[len(indexes)//2:]
# # И сравнить обе половины. Если одинаковы (индексы идут в одном порядке),
# # то продолжительности курсов и количество преподавателей коррелируют. Если нет - то не коррелируют
# print("Связь есть" if ids1 == ids2 else "Связи нет")

# Вариант 2: решение для initial_code
duration_index.sort()
mcount_index.sort()

# Отделяем уже отсортированные индексы от значений
indexes_d = []
indexes_m = []
for index in duration_index:
	indexes_d.append(index[1])
for index in mcount_index:
	indexes_m.append(index[1])

print("Связь есть" if indexes_d == indexes_m else "Связи нет")
print(f"Порядок курсов по длительности: {indexes_d}")
print(f"Порядок курсов по количеству преподавателей: {indexes_m}")